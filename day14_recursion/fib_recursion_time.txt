dfib(n) {
	if (n == 1) return 1; // 1
	if (n == 0) return 0; // 1
	else 
	return fib(n-1) + fib(n-2); // addition time
}

T(0) = T(1) = 1

T(n-1) ~ T(n-2).  This is a lower bound.  We have replaced T(n-1) by a faster
expression T(n-2), for simpler calculation.

T(n)  = 2T(n-2) + c (c = 4) k = 1
	= 2{ 2T(n-4) + c} + c k = 2
	= 4T(n-4) + 3c			
	= 8T(n-6) + 7c		  k = 3
	...
T(n) = 2**kT(n - 2k) + (2**k -1)c —— Equation A
n - 2k = 0 (last step) => k = n/2; there are n/2 such steps
T(n) = (2**(n/2))T(O) + (2**(n/2))c, substituting in Equation A above.

A: O(n**2)
B: O(2**n)
C: O(2**(n/2))
D: All the above
E: B and C only

T(n-2) ~ T(n-1).  This is an upper bound.  We have replaced T(n-2) by a slower
expression T(n-1).  Work out the time bound yourself, like the lower bound calculation above.

Upper bound is 2**n
Lower bound is 2**(n/2)

Thus T(N) for Fibonacci is between 2**N and 2**(N/2).
